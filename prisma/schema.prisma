// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String       @id @default(cuid())
  name             String?
  email            String?      @unique
  emailVerified    DateTime?
  image            String?
  gazPrice         Float        @default(0)
  electricityPrice Float        @default(0)
  deliveryPrice    Float        @default(0)
  accounts         Account[]
  sessions         Session[]
  ingredients      Ingredient[]
  recipes          Recipe[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Recipe {
  id          String                 @id @default(cuid())
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt
  slug        String
  name        String
  ingredients IngredientsOnRecipes[]
  user        User                   @relation(fields: [userId], references: [id])
  userId      String
  quantity    Int
  unit        String                 @default("kg")

  @@unique(fields: [userId, slug], name: "slugUserId")
}

model Ingredient {
  id        String                   @id @default(cuid())
  createdAt DateTime                 @default(now())
  updatedAt DateTime                 @updatedAt
  slug      String
  name      String
  price     Float
  allergens AllergensOnIngredients[]
  recipes   IngredientsOnRecipes[]
  user      User                     @relation(fields: [userId], references: [id])
  userId    String
  unit      String                   @default("kg")

  @@unique(fields: [userId, slug], name: "slugUserId")
}

model Allergen {
  id          String                   @id @default(cuid())
  name        String                   @unique
  ingredients AllergensOnIngredients[]
}

model IngredientsOnRecipes {
  id           String     @id @default(cuid())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id], onDelete: Cascade)
  ingredientId String
  recipe       Recipe     @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId     String
  quantity     Int
  unit         String     @default("kg")

  @@unique(fields: [ingredientId, recipeId])
}

model AllergensOnIngredients {
  id           String     @id @default(cuid())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id], onDelete: Cascade)
  ingredientId String
  allergen     Allergen   @relation(fields: [allergenName], references: [name])
  allergenName String
  presence     String
}
